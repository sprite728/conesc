/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.// Use of this source code is governed by a BSD-style license that can be// found in the LICENSE file.
package parsers.configuration;
import java.util.ArrayList;
import core.Coords;
import core.Component;
import core.Function;
import core.Variable;
import core.ComponentFile;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4L) != 0L)
            return 0;
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 36;
            return 16;
         }
         if ((active0 & 0x5ffe00L) != 0L)
         {
            jjmatchedKind = 36;
            return 38;
         }
         return -1;
      case 1:
         if ((active0 & 0x400000L) != 0L)
            return 38;
         if ((active0 & 0x1ffe00L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 38;
         }
         return -1;
      case 2:
         if ((active0 & 0x6000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1f9e00L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 38;
         }
         return -1;
      case 3:
         if ((active0 & 0x40000L) != 0L)
            return 38;
         if ((active0 & 0x6000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1b9e00L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 38;
         }
         return -1;
      case 4:
         if ((active0 & 0x6000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1b9e00L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
            return 38;
         }
         return -1;
      case 5:
         if ((active0 & 0x6000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1b9e00L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
            return 38;
         }
         return -1;
      case 6:
         if ((active0 & 0x800L) != 0L)
            return 38;
         if ((active0 & 0x6000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1b9600L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
            return 38;
         }
         return -1;
      case 7:
         if ((active0 & 0x88000L) != 0L)
            return 38;
         if ((active0 & 0x10200L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x6000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x121400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
            return 38;
         }
         return -1;
      case 8:
         if ((active0 & 0x100000L) != 0L)
            return 38;
         if ((active0 & 0x10200L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x21400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
            return 38;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000L) != 0L)
            return 38;
         if ((active0 & 0x10200L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 9;
            return 38;
         }
         return -1;
      case 10:
         if ((active0 & 0x1400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 10;
            return 38;
         }
         if ((active0 & 0x10200L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x1400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 11;
            return 38;
         }
         if ((active0 & 0x10200L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 12;
            }
            return 38;
         }
         if ((active0 & 0x400L) != 0L)
            return 38;
         if ((active0 & 0x10200L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 40:
         return jjStopAtPos(0, 31);
      case 41:
         return jjStopAtPos(0, 32);
      case 44:
         return jjStopAtPos(0, 28);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 59:
         return jjStopAtPos(0, 27);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 61:
         return jjStopAtPos(0, 24);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x38600L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x107000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 123:
         return jjStopAtPos(0, 29);
      case 125:
         return jjStopAtPos(0, 30);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 45:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x38600L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 38);
         return jjMoveStringLiteralDfa2_0(active0, 0x46000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x218600L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x104800L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 38);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x18200L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1b200L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80400L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x104800L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x102000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x18200L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x102000L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 38);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0xa1000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x18200L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x10200L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(7, 21);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x21000L);
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 38);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 38);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 38);
         break;
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x10200L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x21000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x10200L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 17, 38);
         break;
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(9, 13);
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x10200L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x10200L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(12, 10, 38);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 112:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 12, 38);
         break;
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(13, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 38;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
                  if ((0x53ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(34);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 27);
                  if ((0x53ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 16:
                  if ((0x53ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(34);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(13, 9);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 3);
                  if ((0x53ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 27);
                  break;
               case 2:
                  if ((0x53ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(4, 6);
                  }
                  else if ((0x44000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x1000000400000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 16);
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x44000000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 4:
                  if ((0x1000000400000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 16);
                  break;
               case 5:
               case 9:
                  if (curChar == 47)
                     jjCheckNAddStates(0, 3);
                  break;
               case 6:
                  if (curChar == 32)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x53ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAddStates(13, 15);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 15:
                  if ((0x4000000400000000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 18:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 21:
                  if (curChar == 34 && kind > 37)
                     kind = 37;
                  break;
               case 23:
                  if (curChar == 32)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x53ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(30, 27);
                  break;
               case 26:
                  if (curChar == 32)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x53ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(27);
                  break;
               case 33:
                  if (curChar == 32)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x53ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(34);
                  break;
               case 37:
                  if ((0x53ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffeaffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 16:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffeaffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 2:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(4, 6);
                  }
                  if (curChar == 110)
                     jjAddStates(16, 17);
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                     jjAddStates(10, 12);
                  break;
               case 10:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 11:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x4400010000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  if (curChar == 110)
                     jjAddStates(16, 17);
                  break;
               case 24:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 27:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 32:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   5, 12, 7, 8, 24, 25, 34, 18, 19, 21, 5, 7, 8, 13, 9, 14, 
   32, 36, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\143\157\156\164\145\170\164\40\147\162\157\165\160", "\143\157\156\146\151\147\165\162\141\164\151\157\156", 
"\154\141\171\145\162\145\144", "\151\155\160\154\145\155\145\156\164\141\164\151\157\156", 
"\151\163\40\144\145\146\141\165\154\164", "\151\163\40\145\162\162\157\162", "\143\157\156\164\145\170\164\163", 
"\143\157\156\164\145\170\164\40\147\162\157\165\160\163", "\143\157\155\160\157\156\145\156\164\163", "\165\163\145\163", 
"\160\162\157\166\151\144\145\163", "\151\156\164\145\162\146\141\143\145", "\43\151\156\143\154\165\144\145", 
"\141\163", null, "\75", "\55\76", "\74\55", "\73", "\54", "\173", "\175", "\50", "\51", 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3bfffffe01L, 
};
static final long[] jjtoSkip = {
   0x1feL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[38];
private final int[] jjstateSet = new int[76];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 38; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
