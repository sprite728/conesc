// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.// Use of this source code is governed by a BSD-style license that can be// found in the LICENSE file.options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(Parser)// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.// Use of this source code is governed by a BSD-style license that can be// found in the LICENSE file.package parsers.configuration;import java.util.ArrayList;

import core.Coords;
import core.Component;
import core.Function;
import core.Variable;import core.ComponentFile;

public class Parser {
  private ComponentFile _file = new ComponentFile();
  public ComponentFile getParsedFile(){
    return _file;
  }}PARSER_END(Parser)SKIP :
{
  < "//" (~["\r", "\n"])* >
| < "/*" > : ML_COMMENT_STATE
| " "
| "\r"
| "\t"
| "\n"
}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}TOKEN :
{
  < CONTEXTGROUP : "context group" >
| < CONFIGURATION : "configuration" >
| < LAYERED : "layered" >
| < IMPLEMENTATION : "implementation" >
| < ISDEFAULT : "is default" >| < ISERROR : "is error" >
| < CONTEXTS : "contexts" >| < GROUPS : "context groups" >
| < COMPONENTS : "components" >
| < USES : "uses" >
| < PROVIDES : "provides" >
| < INTERFACE : "interface" >| < INCLUDE : "#include" >
| < AS : "as" >
| < LEXEME : ["*","&"] >
| < EQUALS : "=" >
| < RARROW : "->" >
| < LARROW : "<-" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < OCB : "{" > | < CCB : "}" >
| < ORB : "(" > | < CRB : ")" >| < INCLUDENAME : ("\""|"<")< DIRECTORY >(".h")(">"|"\"") >| < #DIRECTORY : (("../"|"./"|"/")(""|< NAME >))+ >
| < FULLNAME : (< NAME >["."]<NAME >) >
| < NAME : ("new "|"")(["A"-"Z","a"-"z","_","<",">","0"-"9","[","]"])+ >| < STRING_LITERAL: "\"" (<CHAR>)* "\"" >| < #CHAR: (~["\""] | "\\" (["n","r","\\","\'","\""])) >
}

void parse(): {
  Token configurationName;  Token includeName;}{  (    < INCLUDE >    (      includeName = < INCLUDENAME >    |      includeName = < STRING_LITERAL >    |      includeName = < NAME >    |      includeName = < FULLNAME >    )    {_file.includes.add(includeName.image);}  )*
  (    < CONTEXTGROUP >{_file.type = Component.Type.CONTEXT_CONFIGURATION;}
  |
    < CONFIGURATION >{_file.type = Component.Type.CONFIGURATION;}
  )
  configurationName = < NAME >
  {_file.name = configurationName.image;}
  < OCB >
  parseDeclaration()
  < CCB >< IMPLEMENTATION >< OCB >
  parseImplementation()
  < CCB >}

void parseDeclaration(): {
  Token preposition;
  Token interfaceName;
  Token referenceName;
  Token returnType;
  Token functionName;}{
  (
    {String declaration = "";}
	(preposition = < USES >|preposition = < PROVIDES >)< INTERFACE >
	interfaceName = < NAME >
	{declaration = interfaceName.image;}
	(< SEMICOLON >
	|< AS >
 	 referenceName = < NAME >
	 {declaration += " as " + referenceName.image;}
	 < SEMICOLON >
	)
	{_file.interfaces.get(preposition.image).add(declaration);}
   |
    parseFunction()< SEMICOLON >
  )*}

void parseFunction(): {
  Token functionType;
  Token returnType;
  Token functionName;
}{
  functionType = < LAYERED >
  {Function function = new Function();
   function.definitionCoords = new Coords(functionType.beginLine,
   					  					  functionType.beginColumn);}
     returnType = < NAME >
   {function.returnType = returnType.image;}  (returnType = < LEXEME >   {function.returnType += returnType.image;}  )*
  (functionName = < NAME >
  |functionName = < FULLNAME >)
  {function.name = functionName.image;
   function.definitionCoords.setEnd(functionName.endLine,
  					  				functionName.endColumn);}
  parseVars(function)
  {_file.functions.get("layered").add(function);}
}

void parseVars(Function function): {
  Token varType;
  Token varLexeme;
  Token varName;
}{
  < ORB >
  (< CRB >
  |varType = <NAME>
   {Variable var = new Variable();
    var.type = varType.image;}
   (varName = < NAME >
    {var.name = varName.image;}
   |varLexeme = < LEXEME >
    {var.lexeme = varLexeme.image;}
    varName = < NAME >
    {var.name = varName.image;}
   )
   (< COMMA >|< CRB >)
   {function.variables.add(var);}
  )*
}

void parseImplementation(): {
  Token componentName;
  Token interfaceName;
  Token endFactor;  Token temp;}{  (    < GROUPS >    (      componentName = < NAME >      {_file.contextGroups.add(componentName.image);}      (endFactor = < COMMA >| endFactor = < SEMICOLON >)      {if (endFactor.image.equals(";")) break;}    )*  |
    < COMPONENTS >
    (      {String component = "";}
      componentName = < NAME >      {component += componentName.image;}
      (        (          < AS > temp = < NAME >          {component += " as " + temp.image;}          (endFactor = < COMMA >| endFactor = < SEMICOLON >)        )      |         temp = < ORB >        {component += temp.image;}        (temp = < CRB > {component += temp.image;}      	|      	 (temp = < NAME > {component += temp.image;}      	  (temp = < COMMA >|temp = < CRB >)      	  {component += temp.image;}      	  {if (temp.image.equals(")")) break;}      	 )*        )        (          < AS > temp = < NAME >          {component += " as " + temp.image;}        )*        (endFactor = < COMMA >| endFactor = < SEMICOLON >)       |        (< ISDEFAULT >         {_file.defaultContext = componentName.image;}         (endFactor = < COMMA >| endFactor = < SEMICOLON >)        |         < ISERROR >         {_file.errorContext = componentName.image;}         (endFactor = < COMMA >| endFactor = < SEMICOLON >)         )      | endFactor = < COMMA >| endFactor = < SEMICOLON >)      {_file.components.add(component);}
      {if (endFactor.image.equals(";")) break;}
    )*  |
    < CONTEXTS >
    (
      componentName = < NAME >
      {_file.contexts.add(componentName.image);}
      (< ISDEFAULT >
       {_file.defaultContext = componentName.image;}
       (endFactor = < COMMA >| endFactor = < SEMICOLON >)      |       < ISERROR >       {_file.errorContext = componentName.image;}       (endFactor = < COMMA >| endFactor = < SEMICOLON >) 
      |(endFactor = < COMMA >| endFactor = < SEMICOLON >))
      {if (endFactor.image.equals(";")) break;}
    )*
  |
    (interfaceName = < FULLNAME >
    |interfaceName = < NAME >)
    (< RARROW >
     (componentName = < FULLNAME >
     |componentName = < NAME >)
     {_file.wires.put(interfaceName.image, componentName.image);}
    |< LARROW >
     (componentName = < FULLNAME >
     |componentName = < NAME >)
     {_file.wires.put(componentName.image, interfaceName.image);}
    |
     < EQUALS >     (componentName = < NAME >     |componentName = < FULLNAME >)     {       if (!_file.equality.containsKey(interfaceName.image))       		_file.equality.put(interfaceName.image, new ArrayList<String>());	   _file.equality.get(interfaceName.image).add(componentName.image);     }
    )
    < SEMICOLON >
  )*  
}