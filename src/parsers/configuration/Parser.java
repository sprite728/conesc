/* Generated By:JavaCC: Do not edit this line. Parser.java */
// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.// Use of this source code is governed by a BSD-style license that can be// found in the LICENSE file.
package parsers.configuration;

import java.util.ArrayList;

import core.Coords;
import core.Component;
import core.Function;
import core.Variable;
import core.ComponentFile;

public class Parser implements ParserConstants {
  private ComponentFile _file = new ComponentFile();
  public ComponentFile getParsedFile(){
    return _file;
  }

  final public void parse() throws ParseException {
  Token configurationName;
  Token includeName;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(INCLUDE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDENAME:
        includeName = jj_consume_token(INCLUDENAME);
        break;
      case STRING_LITERAL:
        includeName = jj_consume_token(STRING_LITERAL);
        break;
      case NAME:
        includeName = jj_consume_token(NAME);
        break;
      case FULLNAME:
        includeName = jj_consume_token(FULLNAME);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     _file.includes.add(includeName.image);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTEXTGROUP:
      jj_consume_token(CONTEXTGROUP);
                     _file.type = Component.Type.CONTEXT_CONFIGURATION;
      break;
    case CONFIGURATION:
      jj_consume_token(CONFIGURATION);
                      _file.type = Component.Type.CONFIGURATION;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    configurationName = jj_consume_token(NAME);
   _file.name = configurationName.image;
    jj_consume_token(OCB);
    parseDeclaration();
    jj_consume_token(CCB);
    jj_consume_token(IMPLEMENTATION);
    jj_consume_token(OCB);
    parseImplementation();
    jj_consume_token(CCB);
  }

  final public void parseDeclaration() throws ParseException {
  Token preposition;
  Token interfaceName;
  Token referenceName;
  Token returnType;
  Token functionName;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAYERED:
      case USES:
      case PROVIDES:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USES:
      case PROVIDES:
     String declaration = "";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case USES:
          preposition = jj_consume_token(USES);
          break;
        case PROVIDES:
          preposition = jj_consume_token(PROVIDES);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(INTERFACE);
        interfaceName = jj_consume_token(NAME);
         declaration = interfaceName.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        case AS:
          jj_consume_token(AS);
          referenceName = jj_consume_token(NAME);
          declaration += " as " + referenceName.image;
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         _file.interfaces.get(preposition.image).add(declaration);
        break;
      case LAYERED:
        parseFunction();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void parseFunction() throws ParseException {
  Token functionType;
  Token returnType;
  Token functionName;
    functionType = jj_consume_token(LAYERED);
   Function function = new Function();
   function.definitionCoords = new Coords(functionType.beginLine,
                                                                                  functionType.beginColumn);
    returnType = jj_consume_token(NAME);
    function.returnType = returnType.image;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEXEME:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      returnType = jj_consume_token(LEXEME);
    function.returnType += returnType.image;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      functionName = jj_consume_token(NAME);
      break;
    case FULLNAME:
      functionName = jj_consume_token(FULLNAME);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   function.name = functionName.image;
   function.definitionCoords.setEnd(functionName.endLine,
                                                                        functionName.endColumn);
    parseVars(function);
   _file.functions.get("layered").add(function);
  }

  final public void parseVars(Function function) throws ParseException {
  Token varType;
  Token varLexeme;
  Token varName;
    jj_consume_token(ORB);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CRB:
      case NAME:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CRB:
        jj_consume_token(CRB);
        break;
      case NAME:
        varType = jj_consume_token(NAME);
    Variable var = new Variable();
    var.type = varType.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          varName = jj_consume_token(NAME);
     var.name = varName.image;
          break;
        case LEXEME:
          varLexeme = jj_consume_token(LEXEME);
     var.lexeme = varLexeme.image;
          varName = jj_consume_token(NAME);
     var.name = varName.image;
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        case CRB:
          jj_consume_token(CRB);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    function.variables.add(var);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void parseImplementation() throws ParseException {
  Token componentName;
  Token interfaceName;
  Token endFactor;
  Token temp;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTEXTS:
      case GROUPS:
      case COMPONENTS:
      case FULLNAME:
      case NAME:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUPS:
        jj_consume_token(GROUPS);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NAME:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_6;
          }
          componentName = jj_consume_token(NAME);
       _file.contextGroups.add(componentName.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            endFactor = jj_consume_token(COMMA);
            break;
          case SEMICOLON:
            endFactor = jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
       if (endFactor.image.equals(";")) break;
        }
        break;
      case COMPONENTS:
        jj_consume_token(COMPONENTS);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NAME:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_7;
          }
       String component = "";
          componentName = jj_consume_token(NAME);
       component += componentName.image;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            temp = jj_consume_token(NAME);
           component += " as " + temp.image;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              endFactor = jj_consume_token(COMMA);
              break;
            case SEMICOLON:
              endFactor = jj_consume_token(SEMICOLON);
              break;
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case ORB:
            temp = jj_consume_token(ORB);
         component += temp.image;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CRB:
              temp = jj_consume_token(CRB);
                         component += temp.image;
              break;
            default:
              jj_la1[20] = jj_gen;
              label_8:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NAME:
                  ;
                  break;
                default:
                  jj_la1[18] = jj_gen;
                  break label_8;
                }
                temp = jj_consume_token(NAME);
                           component += temp.image;
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  temp = jj_consume_token(COMMA);
                  break;
                case CRB:
                  temp = jj_consume_token(CRB);
                  break;
                default:
                  jj_la1[19] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
           component += temp.image;
           if (temp.image.equals(")")) break;
              }
            }
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case AS:
                ;
                break;
              default:
                jj_la1[21] = jj_gen;
                break label_9;
              }
              jj_consume_token(AS);
              temp = jj_consume_token(NAME);
           component += " as " + temp.image;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              endFactor = jj_consume_token(COMMA);
              break;
            case SEMICOLON:
              endFactor = jj_consume_token(SEMICOLON);
              break;
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case ISDEFAULT:
          case ISERROR:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ISDEFAULT:
              jj_consume_token(ISDEFAULT);
          _file.defaultContext = componentName.image;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                endFactor = jj_consume_token(COMMA);
                break;
              case SEMICOLON:
                endFactor = jj_consume_token(SEMICOLON);
                break;
              default:
                jj_la1[23] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            case ISERROR:
              jj_consume_token(ISERROR);
          _file.errorContext = componentName.image;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                endFactor = jj_consume_token(COMMA);
                break;
              case SEMICOLON:
                endFactor = jj_consume_token(SEMICOLON);
                break;
              default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[25] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case COMMA:
            endFactor = jj_consume_token(COMMA);
            break;
          case SEMICOLON:
            endFactor = jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
       _file.components.add(component);
       if (endFactor.image.equals(";")) break;
        }
        break;
      case CONTEXTS:
        jj_consume_token(CONTEXTS);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NAME:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_10;
          }
          componentName = jj_consume_token(NAME);
       _file.contexts.add(componentName.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ISDEFAULT:
            jj_consume_token(ISDEFAULT);
        _file.defaultContext = componentName.image;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              endFactor = jj_consume_token(COMMA);
              break;
            case SEMICOLON:
              endFactor = jj_consume_token(SEMICOLON);
              break;
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case ISERROR:
            jj_consume_token(ISERROR);
        _file.errorContext = componentName.image;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              endFactor = jj_consume_token(COMMA);
              break;
            case SEMICOLON:
              endFactor = jj_consume_token(SEMICOLON);
              break;
            default:
              jj_la1[29] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case SEMICOLON:
          case COMMA:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              endFactor = jj_consume_token(COMMA);
              break;
            case SEMICOLON:
              endFactor = jj_consume_token(SEMICOLON);
              break;
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
       if (endFactor.image.equals(";")) break;
        }
        break;
      case FULLNAME:
      case NAME:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FULLNAME:
          interfaceName = jj_consume_token(FULLNAME);
          break;
        case NAME:
          interfaceName = jj_consume_token(NAME);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RARROW:
          jj_consume_token(RARROW);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FULLNAME:
            componentName = jj_consume_token(FULLNAME);
            break;
          case NAME:
            componentName = jj_consume_token(NAME);
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
      _file.wires.put(interfaceName.image, componentName.image);
          break;
        case LARROW:
          jj_consume_token(LARROW);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FULLNAME:
            componentName = jj_consume_token(FULLNAME);
            break;
          case NAME:
            componentName = jj_consume_token(NAME);
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
      _file.wires.put(componentName.image, interfaceName.image);
          break;
        case EQUALS:
          jj_consume_token(EQUALS);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NAME:
            componentName = jj_consume_token(NAME);
            break;
          case FULLNAME:
            componentName = jj_consume_token(FULLNAME);
            break;
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
       if (!_file.equality.containsKey(interfaceName.image))
                _file.equality.put(interfaceName.image, new ArrayList<String>());
           _file.equality.get(interfaceName.image).add(componentName.image);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x0,0x600,0xc0800,0xc0000,0x8400000,0xc0800,0x800000,0x0,0x0,0x800000,0x10000000,0x0,0x38000,0x0,0x18000000,0x0,0x18000000,0x0,0x10000000,0x0,0x400000,0x18000000,0x18000000,0x18000000,0x6000,0x98406000,0x0,0x18000000,0x18000000,0x18000000,0x18006000,0x0,0x0,0x0,0x0,0x7000000,0x38000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x3a,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x11,0x10,0x1,0x11,0x18,0x10,0x0,0x10,0x0,0x10,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x18,0x18,0x18,0x18,0x0,0x18,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
