// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(Parser)
// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package parsers.component;

import core.ComponentFile;
import core.Component;

public class Parser {
  private ComponentFile _file = new ComponentFile();
  public ComponentFile getParsedFile() {
    return _file;
  }
}

PARSER_END(Parser)

SKIP :
{
  < "//" (~["\r", "\n"])* >
| < "/*" > : ML_COMMENT_STATE
| " "
| "\r"
| "\t"
| "\n"
}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}

TOKEN : /*Key-words*/
{
  < CONTEXTGROUP : "context group" >
| < CONTEXT : "context" >
| < CONFIGURATION : "configuration" >
| < MODULE : "module" >
| < INCLUDE : "#include" >
| < IMPLEMENTATION : "implementation" >
| < LAYERED : "layered" >
| < EVENT : "event" >
| < COMMAND : "command" >
| < USES : "uses" >
| < PROVIDES : "provides" >
| < TRANSITION : "transitions" >
| < TRIGGERS : "triggers" >
| < INTERFACE : "interface" >
| < AS : "as" >
| < IF : "if" >
| < IFF : "iff" >
}

TOKEN : /*other*/
{
  < SEMICOLON : ";" >
| < COMMA : "," >
| < OCB : "{" > | < CCB : "}" >
| < ORB : "(" > | < CRB : ")" >
| < INCLUDENAME : ("\""|"<")< DIRECTORY >(".h")(">"|"\"") >
| < #DIRECTORY : (("../"|"./"|"/")(""|< NAME >))+ >
| < FULLNAME : (< NAME >["."]<NAME >) >
| < LEXEME : ["&","*",":"] >
| < NAME : (["A"-"Z","a"-"z","_","<",">","0"-"9"])+ >
| < STRING_LITERAL: "\"" (<CHAR>)* "\"" >
| < #CHAR: (~["\""] | "\\" (["n","r","\\","\'","\""])) >
| < NUMBER : (["0"-"9"])+ >
| < FLOAT : (<NUMBER>["."]<NUMBER>) >
| < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < OPERATION : ("+"|"-"|"/"
				|"+="|"-="|"*="|"/="
				|"=="|"!="|"<="|">="
				|">"|"<"|"<>"|"><"
				|"&&"|"||"|"|"
				|">>"|"<<"|"?") >
| < ANY : ~[] >
}

void parse(): {
  Token componentName;
}{
  (
    < INCLUDE >
    (
      < INCLUDENAME >
    |
      < STRING_LITERAL >
    |
      < NAME >
    |
      < FULLNAME >
    )
  )*
  (< CONTEXT > {_file.type = Component.Type.CONTEXT;}
  |< MODULE >  {_file.type = Component.Type.MODULE;}
  |< CONTEXTGROUP > {_file.type = Component.Type.CONTEXT_CONFIGURATION;}
  |< CONFIGURATION > {_file.type = Component.Type.CONFIGURATION;}) 
  componentName = < NAME >
  {_file.name = componentName.image;} 
}