// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(Parser)
// Copyright (c) 2013 Mikhail Afanasov and DeepSe group. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
package parsers.module;

import java.util.ArrayList;
import java.util.Arrays;

import core.Coords;
import core.Function;
import core.Variable;
import core.Component;
import core.ComponentFile;

public class Parser {
  private ComponentFile _file = new ComponentFile();
  public ComponentFile getParsedFile() {
    return _file;  }}PARSER_END(Parser)SKIP :{
  < "//" (~["\r", "\n"])* >
| < "/*" > : ML_COMMENT_STATE| " "| "\r"| "\t"| "\n"}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}TOKEN : /*Key-words*/{  < CONTEXT : "context" >
| < CONTEXTGROUP : "context group" >
| < MODULE : "module" >
| < INCLUDE : "#include" >| < IMPLEMENTATION : "implementation" >| < LAYERED : "layered" >| < EVENT : "event" >
| < TASK : "task">
| < COMMAND : "command" >
| < USES : "uses" >
| < PROVIDES : "provides" >
| < TRANSITION : "transitions" >
| < TRIGGERS : "triggers" >
| < INTERFACE : "interface" >
| < AS : "as" >
| < IF : "if" >
| < IFF : "iff" >
| < SAFE : "@safe()" >}TOKEN : /*other*/{
  < SEMICOLON : ";" >
| < COMMA : "," >
| < RARROW : "->" >
| < OCB : "{" > | < CCB : "}" >| < ORB : "(" > | < CRB : ")" >
| < OREB : "[" > | < CREB : "]" >
| < INCLUDENAME : ("\""|"<")< DIRECTORY >(".h")(">"|"\"") >
| < #DIRECTORY : (("../"|"./"|"/")(""|< NAME >))+ >
| < FULLNAME : (< NAME >["."]<NAME >) >
| < LEXEME : ["&","*",":"] >
| < NAME : (["A"-"Z","a"-"z","_","<",">","0"-"9"])+ >
| < STRING_LITERAL: "\"" (<CHAR>)* "\"" >
| < #CHAR: (~["\""] | "\\" (["n","r","\\","\'","\""])) >
| < NUMBER : (["0"-"9"])+ >
| < FLOAT : (<NUMBER>["."]<NUMBER>) >
| < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < LOGIC_OPERAND : ("&&"|"||"|"!") >
| < OPERATION : ("+"|"-"|"/"
				|"+="|"-="|"*="|"/="
				|"=="|"!="|"<="|">="
				|">"|"<"|"<>"|"><"
				|"|"|">>"|"<<"|"?") >
| < ANY : ~[] >
}void parse(): {
  Token moduleName;
  Token safe;
  Token temp;
  Token curveBracket;
  Token preposition;
  Token interfaceName;
  Token referenceName;
  Token contextName;
  Token includeName;
  Token endFactor;
  Token startFactor;
  Token logicOperand;
}{
  (
    < INCLUDE >
    (
      includeName = < INCLUDENAME >
    |
      includeName = < STRING_LITERAL >
    |
      includeName = < NAME >
    |
      includeName = < FULLNAME >
    )
    {_file.includes.add(includeName.image);}
  )*
  (< CONTEXT > {_file.type = Component.Type.CONTEXT;}
  |< MODULE >  {_file.type = Component.Type.MODULE;}) 
  moduleName = < NAME >
  {_file.name = moduleName.image;
   _file.nameCoords = new Coords(moduleName.beginLine,
   								 moduleName.beginColumn,
   								 moduleName.endLine,
   								 moduleName.endColumn);
  }
  (
    safe = < SAFE >
    {_file.safe = safe.image;}
  )*
  curveBracket = < OCB >
  {_file.declarationCoords = new Coords(curveBracket.endLine,
  								 		curveBracket.endColumn);
  }
  (
    {String declaration = "";}
    (	 (preposition = < USES >|preposition = < PROVIDES >)
	 (	   < INTERFACE >
	   interfaceName = < NAME >
	   {declaration = interfaceName.image;}
	   (< SEMICOLON >
	   |< AS >
 	    referenceName = < NAME >
	    {declaration += " as " + referenceName.image;}
	    (< SEMICOLON >
	    |< OREB > referenceName = < NAME >
	     {declaration += "[" + referenceName.image;}
	     referenceName = < NAME >
	     {declaration += " " + referenceName.image + "]";}
	     < CREB >
	     <  SEMICOLON >
	    )
	   )
	 |
	   < CONTEXTGROUP >
	   interfaceName = < NAME >
	   {_file.usedGroups.add(interfaceName.image);}
	   < SEMICOLON >
	 | 
	   (
	     < OCB >
	     {declaration = "";}
	     (
	      < INTERFACE >
	      interfaceName = < NAME >
	      {declaration += interfaceName.image;}
	      (< SEMICOLON >
	      |< AS >
 	       referenceName = < NAME >
	       {declaration += " as " + referenceName.image;}
	       (
	         < OREB >
	         {declaration += "[";}
	         (
	           temp = < NAME >
	           {declaration += " " + temp.image;}
	         )*
	         < CREB >
	         {declaration += "]";}	       )*
	       < SEMICOLON >
	      )
	      {declaration += ",";}
	    |
	      < CONTEXTGROUP >
	      interfaceName = < NAME >
	      {_file.usedGroups.add(interfaceName.image);}
	      < SEMICOLON >
	    )*
	    < CCB >	   )
	 )
	|
	 preposition = < TRANSITION >
	 {declaration = "";}
	 (
	  contextName = < NAME >
	  {//declaration += contextName.image;
	   _file.transitions.put(contextName.image, new ArrayList<String >());}
	  (endFactor = < SEMICOLON >|endFactor = < COMMA >
	  |endFactor = < IFF >
	   //{declaration += " if";}	   (
	     {String sFactor = "";}	     (	       startFactor = < ORB >
	       {sFactor += "(";} 
	      |startFactor = < LOGIC_OPERAND >
	       {sFactor += startFactor.image;}
	      |endFactor = < SEMICOLON >
	      |endFactor = < COMMA >
	     )*
	     {if(endFactor.image.equals(";")||endFactor.image.equals(","))break;}
	     referenceName = < FULLNAME >
	     //{declaration += " " + referenceName.image;}
	     (endFactor = < SEMICOLON >
	      {_file.transitions.get(contextName.image).add(sFactor + referenceName.image);} 
	      |endFactor = < COMMA >
	      {_file.transitions.get(contextName.image).add(sFactor +referenceName.image);} 
	      | endFactor = < LOGIC_OPERAND >
	        {//declaration += " " + endFactor;
	        _file.transitions.get(contextName.image).add(sFactor + referenceName.image+" "+endFactor.image);}
	      | endFactor = < CRB >
	        {//declaration += " " + endFactor;
	        _file.transitions.get(contextName.image).add(sFactor + referenceName.image+" "+endFactor.image);}
	     )
	     {if (endFactor.image.equals(",")) break;}
	   )*
	  )
	  {
	    //if (endFactor.image.equals(",")) declaration += ",";
	    //else
	    if (endFactor.image.equals(";")) break;
	  }
	 )*
	|
	 preposition = < TRIGGERS >
	 {declaration = "";}
	 (	   contextName = < FULLNAME >
	   (endFactor = < SEMICOLON >
	    {declaration += contextName.image;}
	   |endFactor = < COMMA >
	    {declaration += contextName.image+",";}
	   )
	   {if(endFactor.image.equals(";")) break;}
     )*
	) 
	{if (declaration.length() > 0)
	  _file.interfaces.get(preposition.image).addAll(new ArrayList<String>(Arrays.asList(declaration.split(","))));}
  )*
  curveBracket = < CCB >
  {_file.declarationCoords.setEnd(curveBracket.endLine,
  								  curveBracket.endColumn);
  }
  < IMPLEMENTATION >
  {_file.implementationCoords = parseBody();}
}

void parseFunction(): {
  Token functionType;
  Token returnType;
  Token functionName;
  Token lexeme;
  Token temp;
}{
  (functionType = < EVENT >
  |functionType = < COMMAND >
  |functionType = < LAYERED >)
  {Function function = new Function();
   function.definitionCoords = new Coords(functionType.beginLine,
   					  					  functionType.beginColumn);}
  returnType = < NAME >
  {function.returnType = returnType.image;}
  (
    lexeme = < LEXEME >
    {function.returnType += lexeme.image;}
  )*
  (functionName = < NAME >
  |functionName = < FULLNAME >)
  {String additional = "";}
  (
    < OREB >
	{additional += "[";}
	(
	  temp = < NAME >
	  {additional += " " + temp.image;}
	)*
	< CREB >
	{additional += "]";}
  )*
  {function.name = functionName.image + additional;
   function.definitionCoords.setEnd(functionName.endLine,
  					  				functionName.endColumn);}
  parseVars(function)
  {function.bodyCoords = parseBody();}
  {_file.functions.get(functionType.image).add(function);}
}

void parseVars(Function function): {
  Token varType;
  Token varLexeme;
  Token varName;
}{
  < ORB >
  (< CRB >
  |varType = <NAME>
   {Variable var = new Variable();
    var.type = varType.image;}
   (varName = < NAME >
    {var.name = varName.image;}
   |varLexeme = < LEXEME >
    {var.lexeme = varLexeme.image;}
    varName = < NAME >
    {var.name = varName.image;}
   )
   (< COMMA >|< CRB >)
   {function.variables.add(var);}
  )*
}

Coords parseBody(): {
  Token functionBody;
}{
  functionBody = < OCB >
  {
   Coords coords = new Coords(functionBody.endLine,functionBody.endColumn);
   int cbcounter = 1; int rbcounter=0; String body = functionBody.image;
  }
  (functionBody =< FULLNAME >
   {body += " "+functionBody.image;}
  |functionBody =< NAME >
   {body += " "+functionBody.image;}
  |functionBody =< ORB >
   {body += " "+functionBody.image; rbcounter += 1;}
  |functionBody =< CRB >
   {body += " "+functionBody.image; rbcounter -= 1;}
  |functionBody =< OCB >
   {body += " "+functionBody.image; cbcounter += 1;}
  |functionBody =< CCB >
   {body += " "+functionBody.image; cbcounter -= 1;
    if (cbcounter <= 0) {
      coords.setEnd(functionBody.beginLine,functionBody.beginColumn);
      _file.bodies.add(body);
      //System.out.println(body);      return coords;
    }
   }
  |functionBody = < RARROW >
   {body += " "+functionBody.image;}
  |functionBody =< COMMA >
   {body += " "+functionBody.image;}
  |functionBody =< SEMICOLON >
   {body += " "+functionBody.image;}
  |functionBody =< STRING_LITERAL >
   {body += " "+functionBody.image;}
  |parseFunction()
  |functionBody = < NUMBER >
   {body += " "+functionBody.image;}
  |functionBody = < FLOAT >
   {body += " "+functionBody.image;}
  |functionBody = < FLOATING_POINT_LITERAL >
   {body += " "+functionBody.image;}
  |functionBody = < LEXEME >
   {body += " "+functionBody.image;}
  |functionBody = < OPERATION >
   {body += " "+functionBody.image;}
  |functionBody = < IF >
   {body += " "+functionBody.image;}
  |functionBody = < TASK >
   {body += " "+functionBody.image;}
  |functionBody = < OREB >
   {body += " "+functionBody.image;}
  |functionBody = < CREB >
   {body += " "+functionBody.image;}
  |functionBody = < LOGIC_OPERAND >
   {body += " "+functionBody.image;}
  |functionBody =< ANY >
   {body += " "+functionBody.image;}
  )*
  {System.out.println(functionBody.beginLine + " " + functionBody.beginColumn + " in file " + _file.name);}
}